import propsWithBsClassName from './propsWithBsClassName';
describe('propsWithBsClassName', function () {
  it('returns a basic classname', function () {
    var _propsWithBsClassName = propsWithBsClassName({}),
        className = _propsWithBsClassName.className;

    expect(className).toBe('form-control rbt-input');
  });
  it('includes a classname for a large input', function () {
    var _propsWithBsClassName2 = propsWithBsClassName({
      size: 'lg'
    }),
        className = _propsWithBsClassName2.className;

    expect(className).toContain('form-control-lg');
  });
  it('includes a classname for a small input', function () {
    var _propsWithBsClassName3 = propsWithBsClassName({
      size: 'sm'
    }),
        className = _propsWithBsClassName3.className;

    expect(className).toContain('form-control-sm');
  });
  it('includes a classname for an invalid input', function () {
    var _propsWithBsClassName4 = propsWithBsClassName({
      isInvalid: true
    }),
        className = _propsWithBsClassName4.className;

    expect(className).toContain('is-invalid');
  });
  it('includes a classname for a valid input', function () {
    var _propsWithBsClassName5 = propsWithBsClassName({
      isValid: true
    }),
        className = _propsWithBsClassName5.className;

    expect(className).toContain('is-valid');
  });
  it('includes an arbitrary classname', function () {
    var _propsWithBsClassName6 = propsWithBsClassName({
      className: 'foo'
    }),
        className = _propsWithBsClassName6.className;

    expect(className).toContain('foo');
  });
  it('returns pass-through props', function () {
    var _propsWithBsClassName7 = propsWithBsClassName({
      foo: 'bar'
    }),
        foo = _propsWithBsClassName7.foo;

    expect(foo).toBe('bar');
  });
});